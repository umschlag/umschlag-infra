#!/usr/bin/env python

import json
import requests
import os

def main():
    api_key = os.environ.get('HCLOUD_TOKEN', '')

    if not api_key.strip():
        print 'Missing HCLOUD_TOKEN environment variable!'
        exit(1)

    hosts = []
    hostvars = {}

    root = {
        'servers': {
            'hosts': hosts
        },
        '_meta': {
            'hostvars': hostvars
        }
    }

    url = 'https://api.hetzner.cloud/v1/servers'
    headers = {'Authorization': 'Bearer ' + api_key}

    r = requests.get(url, headers=headers)

    for server in r.json()['servers']:
        server_name = server['name']

        hosts.append(server_name)
        hostvars[server_name] = fill_host_vars(server)

        add_to_type(root, server)
        add_to_location(root, server)

    print json.dumps(root)

def fill_host_vars(server):
    return {
        'ansible_host': server['public_net']['ipv4']['ip'],
        'hcloud_name': server['name'],
        'hcloud_type': server['server_type']['name'],
        'hcloud_image': server['image']['name'],
        'hcloud_datacenter': server['datacenter']['name'],
        'hcloud_location': server['datacenter']['location']['name'],
        'hcloud_ipv4': server['public_net']['ipv4']['ip'],
        'hcloud_ipv6': server['public_net']['ipv6']['ip'],
        'hcloud_status': server['status'],
        'ansible_user': 'root',
        'ansible_port': '22022',
        'ansible_python_interpreter': '/usr/bin/python3',
        'ansible_ssh_common_args': '-o StrictHostKeyChecking=no'
    }

def add_to_type(root, server):
    t = server['server_type']['name']
    if not root.has_key(t):
        root[t] = { 'hosts': [] }
    root[t]['hosts'].append(server['name'])

def add_to_location(root, server):
    l = server['datacenter']['location']['name']
    if not root.has_key(l):
        root[l] = { 'hosts': [] }
    root[l]['hosts'].append(server['name'])

if __name__ == '__main__':
    main()
